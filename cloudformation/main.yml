Resources:
  #
  # ========================
  # Infrastructure
  # ========================
  #

  #
  # IAM
  #
  GitHubOIDC:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ThumbprintList:
        - 6938fd4d98bab03faadb97b34396831e3780aea1
      ClientIdList:
        - sts.amazonaws.com

  CloudformationDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: github-oidc-role
      MaxSessionDuration: 3600
      Policies:
        - PolicyName: inline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRoleWithWebIdentity
                  - cloudformation:*
                Resource:
                  - "*"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRoleWithWebIdentity
            Principal:
              Federated: !Ref GitHubOIDC
            Condition:
              StringLike:
                token.actions.githubusercontent.com:sub: repo:Beta-Folf/stash-bot:ref:refs/heads/main

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: stash-bot-code-pipeline
      ManagedPolicyArns:
        - !Ref AmazonEC2ContainerRegistryPowerUser

  ECRRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: stash-bot-ecr-role
      Policies:
        - PolicyName: inline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - kms:Decrypt
                Resource:
                  - "*"

  ECRUser:
    Type: AWS::IAM::User
    Properties:
      UserName: stash-bot-ecr
      # TODO: Give secrets permissions - https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-secrets.html#secrets-iam

  #
  # Networking
  #
  StashBotVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "172.31.0.0/16"
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"

  EC2Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !GetAtt StashBotVPC.CidrBlock
      AvailabilityZone: "us-east-1a"
      VpcId:
        Ref: StashBotVPC

  #
  # S3
  #
  CodePipelineSourceArtifacts:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: stash-bot-code-pipeline-source-artifacts

  CodeBuildArtifacts:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: stash-bot-code-build-artifacts

  #
  # EC2
  #
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: stash-bot-ec2-sg
      GroupDescription: The security group for the stash bot EC2 instances
      VpcId:
        Ref: StashBotVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: stash-bot-ec2-launch-template
      LaunchTemplateData:
        ImageId: ami-08e4e35cccc6189f4 # Amazon linux x86
        InstanceType: t2.micro
        SecurityGroupIds:
          - !Ref EC2SecurityGroup

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: stash-bot-asg
      MinSize: "1"
      MaxSize: "1"
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: !GetAtt EC2LaunchTemplate.LatestVersionNumber
      AvailabilityZones:
        - "us-east-1a"
      VPCZoneIdentifier:
        - !Ref EC2Subnet

  #
  # ECR
  #
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: stash-bot-ecr-repository
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS: !GetAtt ECRUser.Arn # TODO: Try !Ref instead
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:PutImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"

  #
  # ECS
  #
  # ECSService:
  #   Type: AWS::ECS::Service
  #   Properties:
  #
  # ========================
  # Deployment
  # ========================
  #

  #
  # Secrets
  #
  DiscordToken:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: stash-bot-discord-token

  #
  # CodeBuild
  #
  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: stash-bot-code-build
      Artifacts:
        Type: "CODEPIPELINE"

  #
  # CodePipeline
  #
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineSourceArtifacts
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        # Pull from GitHub
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceCode
              Configuration:
                Owner: Beta-Folf
                Repo: git@github.com:Beta-Folf/stash-bot.git
                Branch: main
                PollForSourceChanges: false
                OAuthToken: !Ref GitHubOAuthToken # TODO: Secret value
              RunOrder: 1
        # Build application and Docker image
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
        # Deploy
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              InputArtifacts:
                - Name: SourceCode
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                RoleArn: !GetAtt CloudformationRole.Arn
                StackName: !Ref ApplicationStackName
                TemplatePath: !Sub "SourceCode::application.yaml"
              RunOrder: 1
